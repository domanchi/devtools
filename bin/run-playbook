#!/usr/bin/env python3
"""
Runs playbook for a specific host.
Source: https://stackoverflow.com/a/40866911/13340678
"""
import argparse
import getpass
import os
import subprocess
import tempfile
from typing import Any
from typing import Dict
from typing import List
from typing import Optional

import yaml


ROLES = [
    # OS-specific roles.
    {
        'role': 'osx',
        'when': 'ansible_distribution == "MacOSX"',
        '_require_root': True,
    },
    {
        'role': 'wsl',
        'when': 'is_wsl',
    },

    # Basic configurations
    {
        'role': 'ssh',
        '_kwargs': {
            'vars_prompt': [{
                'name': 'ssh_passphrase',
                'prompt': 'Enter passphrase for SSH key'
            }],
        },
    },
    {
        'role': 'bash',
    },

    # Language installations
    {
        'role': 'python',
        '_require_root': True,
    },
    {
        'role': 'node',
        '_require_root': True,
    },
    {
        # Needed for `uq`
        'role': 'golang',
        '_require_root': True,
    },

    # Developer tooling
    {
        'role': 'git_tools',
    },
    {
        'role': 'ripgrep',
        '_require_root': True,
    },
    {
        'role': 'fzf',
    },
    {
        'role': 'jq',
        '_require_root': True,
    },
    {
        'role': 'vim',
        '_require_root': True,
    },
    {
        'role': 'tmux',
        '_require_root': True,
    },
    {
        'role': 'direnv',
    },

    # Misc useful tools
    {
        'role': 'wormhole',
        '_require_root': True,
    },
    {
        'role': 'outline',
        '_require_root': True,
    },

    # Vendor settings
    {
        'role': 'vscode',
    },
]


def main() -> None:
    args = parse_args()

    roles = args.role or ROLES
    if args.from_role:
        roles = []
        should_start = False
        for role in ROLES:
            if role == args.from_role:
                should_start = True

            if should_start:
                roles.append(role)

    content = yaml.dump(
        generate_playbook(
            *roles,
            host=args.host,
            variables={
                'username': args.username,
                'is_wsl': is_wsl(),
                'home_prefix':
                    '{{ "/Users" if ansible_distribution == "MacOSX" else "/home" }}',
                'home_directory':
                    '{{ home_prefix }}/{{ username }}',
            },
        ),
        sort_keys=False,
    )

    if args.dry_run:
        print(content)
        return

    with tempfile.NamedTemporaryFile(
        mode='w',
        dir=os.path.abspath(os.path.join(os.path.dirname(__file__), '..')),
    ) as f:
        f.write(content)
        f.seek(0)

        arguments = [
            'venv/bin/ansible-playbook',
            '--inventory', 'hosts.yaml',
            f.name,
        ]
        if require_root(roles):
            arguments.append('--ask-become-pass')

        subprocess.run(arguments)



def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--host',
        type=str,
        default='localhost',
        help='Specifies host to install Ansible roles.',
    )
    parser.add_argument(
        '-u',
        '--username',
        type=str,
        default=getpass.getuser(),
        help='Specifies username to determine current user.',
    )
    parser.add_argument(
        '--dry-run',
        action='store_true',
        help='Displays generated YAML file.',
    )

    group = parser.add_mutually_exclusive_group()

    def valid_role(name: str) -> Dict[str, Any]:
        for role in ROLES:
            if role['role'] == name:
                return role

        raise argparse.ArgumentTypeError(f'Invalid role: {name}')

    group.add_argument(
        '-r',
        '--role',
        type=valid_role,
        action='append',
        default=[],
        help='Specify roles to run (in order).',
    )
    group.add_argument(
        '--from',
        type=valid_role,
        dest='from_role',
        help='Runs roles in order, from the specified role.',
    )

    return parser.parse_args()


def is_wsl() -> bool:
    # Source: https://stackoverflow.com/a/38859331/13340678
    if not os.path.exists('/proc/version'):
        return False

    with open('/proc/version') as f:
        version = f.read()

    return 'microsoft' in version.lower()


def require_root(roles: List[Dict[str, Any]]) -> bool:
    if os.geteuid() == 0:
        return False

    return any(filter(lambda x: x.get('_require_root', False), roles))


def generate_playbook(
    *roles: Dict[str, Any],
    host: str,
    variables: Optional[Dict[str, str]] = None,
) -> List[Dict[str, Any]]:
    extra_kwargs = {
        'vars': variables,
    }
    for role in roles:
        for key, value in role.get('_kwargs', {}).items():
            if key not in extra_kwargs:
                extra_kwargs[key] = value
            elif isinstance(extra_kwargs[key], list):
                extra_kwargs[key].extend(value)
            else:
                extra_kwargs[key] = {
                    **extra_kwargs[key],
                    **value,
                }

    return [{
        'hosts': host,
        'roles': [
            {
                key: value
                for key, value in role.items()
                if not key.startswith('_')
            }
            for role in roles
        ],
        **extra_kwargs,
    }]


if __name__ == '__main__':
    main()
